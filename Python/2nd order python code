
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import TransferFunction, zpk2tf, tf2zpk, lfilter

# Define Noise Transfer Function (NTF)
zeros = np.array([np.sqrt(2) / 2, -np.sqrt(2) / 2])  # Example zeros
poles = np.array([0.5 + 0.5j, 0.5 - 0.5j])           # Example poles
k = 1                                                # Gain

b, a = zpk2tf(zeros, poles, k)
ntf = TransferFunction(b, a, dt=True)

# RMS Gain Calculation
OSR = 512
f_range = np.linspace(0, 0.5 / OSR, 1000)
z_range = np.exp(2j * np.pi * f_range)
H_eval = np.polyval(b, z_range) / np.polyval(a, z_range)

rms_gain = np.sqrt(np.mean(np.abs(H_eval)**2))  # RMS magnitude
sigma_H = 20 * np.log10(rms_gain)  # Convert to dB
print(f"RMS Gain (in dB): {sigma_H}")

# Bode Plot: Magnitude and Phase Response
frequencies = np.linspace(0, 0.5, 1000)  # Normalized frequency range
z_bode = np.exp(2j * np.pi * frequencies)
H_bode = np.polyval(b, z_bode) / np.polyval(a, z_bode)

# Calculate magnitude and phase
magnitude = 20 * np.log10(np.abs(H_bode))  # Magnitude in dB
phase = np.angle(H_bode, deg=True)  # Phase in degrees

# Plot magnitude response
plt.figure()
plt.subplot(2, 1, 1)
plt.plot(frequencies, magnitude, label='Magnitude Response', color='blue')
plt.title('Bode Plot of NTF')
plt.ylabel('Magnitude (dB)')
plt.grid()
plt.legend()

# Plot phase response
plt.subplot(2, 1, 2)
plt.plot(frequencies, phase, label='Phase Response', color='orange')
plt.xlabel('Frequency (Normalized)')
plt.ylabel('Phase (Degrees)')
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()

# Pole-Zero Plot
z, p, k = tf2zpk(b, a)
plt.figure()
plt.scatter(np.real(z), np.imag(z), s=50, label='Zeros', marker='o', color='blue')
plt.scatter(np.real(p), np.imag(p), s=50, label='Poles', marker='x', color='red')
plt.axvline(0, color='k', lw=0.5)
plt.axhline(0, color='k', lw=0.5)
plt.gca().add_artist(plt.Circle((0, 0), 1, color='gray', fill=False, linestyle='--'))
plt.legend()
plt.title('Pole-Zero Plot of NTF')
plt.xlabel('Real')
plt.ylabel('Imaginary')
plt.grid()
plt.axis('equal')
plt.show()

# Delta-Sigma Modulation Simulation
N = 2**12
f_in = 1 / (OSR * 2)
n = np.arange(N)
input_signal = 0.5 * np.sin(2 * np.pi * f_in * n)

v = np.zeros(N)  # Integrator output
x = np.zeros(2)  # State
for i in range(N):
    x[0] = x[0] + input_signal[i] - np.round(x[0])
    x[1] = x[1] + x[0] - np.round(x[1])
    v[i] = x[1]

# Spectral Analysis
spectrum = np.fft.fft(v * np.hanning(N))
frequencies = np.fft.fftfreq(N, d=1/OSR)

# SNR Calculation
signal_bin = int(f_in * N * OSR)
noise_bins = np.r_[0:signal_bin-1, signal_bin+1:N//2]
signal_power = np.abs(spectrum[signal_bin])**2
noise_power = np.sum(np.abs(spectrum[noise_bins])**2)
snr = 10 * np.log10(signal_power / noise_power)
print(f"SNR (in dB): {snr}")

# Time-Domain Signal Plot
plt.figure()
plt.plot(n[:500], v[:500], label='Output Signal')
plt.title('Time-Domain Signal')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()
plt.show()

# Spectrum Plot
plt.figure()
plt.plot(frequencies[:N//2], 20 * np.log10(np.abs(spectrum[:N//2]) + 1e-12), label='Spectrum')
plt.title('Output Spectrum')
plt.xlabel('Frequency (Normalized)')
plt.ylabel('Amplitude (dB)')
plt.grid()
plt.legend()
plt.show()

# SINC Filter Design and Application
sinc_filter = np.sinc(np.linspace(-4, 4, 101))
filtered_output = lfilter(sinc_filter, 1, v)

# Filtered Time-Domain Signal Plot
plt.figure()
plt.plot(n[:500], filtered_output[:500], label='Filtered Output')
plt.title('Filtered Time-Domain Signal')
plt.xlabel('Sample Index')
plt.ylabel('Amplitude')
plt.grid()
plt.legend()
plt.show()

